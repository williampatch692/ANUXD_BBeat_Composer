// Initialize effects
t || (
	echo = [Array(12288).fill(0), Array(6144).fill(0)], // Initialize echo arrays
	lowPass = [0, 0, 0, 0], // Initalize lowpass array
	c = 'charCodeAt' // Shorthand for charCodeAt function
),

t %= 2 ** 23, // Song length

i = 0, // Variable for the lowpass function
subCycle = t >> 13,
chords = ['5:<A<ACH', '5:>A>AFJ', '8<ADADHM', '27<><>CH'][subCycle >> 4 & 3], // Notes for chords/melody
cycle = t / 2 ** 17,
flag = 15 > cycle % 16, // For cutting off sounds
fade = min(cycle / 16, 1), // Fade-in
notStart = fade | 0,
volTweak = 2 * notStart / 3,

// Main synth
// `cycle % 1` is for the high pitch-like fade-in
// `PI * cycle` is to add more flavor to the synth (would be a triangle wave otherwise)
// Try toying around with those values, you might get something interesting!
mainSynth = fade * !!(~subCycle >> 2 & 3) * atan(cycle % 1 * tan(
	PI * cycle / (1 + 3 * ((longCycle = subCycle >> 8 & 3) == 3)) + asin(sin(
		(t / 25 + sin(t / 1024) / 2) * 2 ** (chords[c](subCycle & 3) / 12 - 4)
	))
)) + echo[0].shift(),
echo[0].push(mainSynth / 2 * (2 - cycle % 1)),

// Square synth introduced halfway into the song
// Square waves are generated by doing division by 0 in atan()
// `Z == Z && Z` is used for NaN detection
square = flag * (1 - 32 * cycle % 1) ** .5 * atan(
	(Z = tan(t / 25 * 2 ** (chords[c](32 * cycle & 7) / 12 - 4)) / 0) == Z && Z
) / 4 + echo[1].shift(),
echo[1].push(square / (1.5 + cos(cycle * PI * 4) / 4)),

// Lowpass function
// Is a recursive function, be careful with modifying it
(lp = (startVol, decrement, expression) => (
	lowPass[i] += max(min(startVol, 1), 0) * ((i ? lowPass[i - 1] : expression) - lowPass[i]),
	++i > 3 ? lowPass[3] : lp(startVol - decrement, decrement)
))(
	fade * sin(PI * cycle) ** 2 / 2 + (1 + 2 * fade) / 6, // Starting multiplier for 1st lowpass value
	fade * cos(PI * cycle / 2) ** 2 / 9, // Decreases multiplier for following lowpass values
	(
		// Song code
		// Main synth
		2 / 3 * mainSynth +
		// Kick
		flag * (notStart * sin(1e3 / (70 + t % 2 ** (
			15 - (subCycle & 3 ^ subCycle >> 1 & 7 ^ subCycle >> 2 & 3 ^ longCycle ^ 1) % 3 -
			!(l = subCycle >> 9 & 1) * 3 * !(~subCycle >> 1 & 7)
		)) ** (.12 - cycle % 1 / 10)) +
		// Snare-ish sound
		!!(subCycle >> 7) * ((32 * cycle & 3) == (subCycle >> 1 & 3 ^ subCycle >> 2 & 3) % 3) *
		(~t >> 9 & 7) * sin((t / 2 | subCycle >> 3 & 7) ** 3) / 8 +
		// Bass
		(longCycle != 2) * fade ** .5 * (t / 120 / PI * 2 ** ('3860'[subCycle >> 4 & 3] / 12) & 1) *
		((subCycle & 1) + volTweak) / (1 + volTweak)) +
		// Square synth
		l * square
	) / 4
);
